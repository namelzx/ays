{"remainingRequest":"/Users/liangzexiang/WebstormProjects/ays/node_modules/thread-loader/dist/cjs.js!/Users/liangzexiang/WebstormProjects/ays/node_modules/babel-loader/lib/index.js!/Users/liangzexiang/WebstormProjects/ays/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/liangzexiang/WebstormProjects/ays/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liangzexiang/WebstormProjects/ays/src/views/manage/rules.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/liangzexiang/WebstormProjects/ays/src/views/manage/rules.vue","mtime":1587402564000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getList, del, change, delAll, changeAll } from '@/api/rules';\nimport waves from '@/directive/waves'; // 水波纹指令\n\nimport { getArrByKey } from '@/utils';\nimport tree from '@/utils/tree';\nimport rulesForm from \"./rules/form\";\nimport treeTable from '@/components/TreeTable';\nexport default {\n  name: 'Rules',\n  components: {\n    rulesForm: rulesForm,\n    treeTable: treeTable\n  },\n  directives: {\n    waves: waves\n  },\n  filters: {\n    statusFilter: function statusFilter(status) {\n      var statusMap = {\n        0: '禁用',\n        1: '正常'\n      };\n      return statusMap[status];\n    }\n  },\n  data: function data() {\n    return {\n      tableKey: 0,\n      list: [],\n      selectedRows: null,\n      listLoading: true,\n      expandAll: true,\n      columns: [{\n        text: '名称',\n        value: 'title'\n      }],\n      listQuery: {\n        status: '-1',\n        title: ''\n      },\n      buttonDisabled: true,\n      deleting: false\n    };\n  },\n  computed: {\n    getRulesList: function getRulesList() {\n      return tree.listToTreeMulti(this.list, 0, 'id', 'pid', 'children', {\n        'delete': false\n      });\n    }\n  },\n  watch: {},\n  created: function created() {\n    this.fetchList();\n  },\n  methods: {\n    fetchList: function fetchList() {\n      var _this2 = this;\n\n      this.listLoading = true;\n      getList(this.listQuery).then(function (response) {\n        _this2.list = response.data.data;\n        _this2.listLoading = false;\n      });\n    },\n    handleFilterClear: function handleFilterClear() {\n      this.listQuery = {\n        status: '-1',\n        title: ''\n      };\n      this.fetchList();\n    },\n    handleSelectionChange: function handleSelectionChange(val) {\n      if (val.length > 0) {\n        this.buttonDisabled = false;\n      } else {\n        this.buttonDisabled = true;\n      }\n\n      this.selectedRows = val;\n    },\n    handleCreate: function handleCreate() {\n      this.$refs.fromRules.handleCreate();\n    },\n    handleUpdate: function handleUpdate(index, id) {\n      this.$refs.fromRules.handleUpdate(id);\n    },\n    handleModifyStatus: function handleModifyStatus(index, id, status) {\n      var statusObj = {\n        'status': 1 - status\n      };\n      this.list = tree.upadteArr(this.list, 'id', id, statusObj);\n      change(id, 'status', 1 - status).then(function (response) {});\n    },\n    updateRow: function updateRow(temp) {\n      this.fetchList();\n    },\n    handleDelete: function handleDelete(index, id) {\n      var _this3 = this;\n\n      var _this = this;\n\n      this.$confirm('此操作将永久删除该记录, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        var delObj = {\n          'delete': true\n        };\n        _this.list = tree.upadteArr(_this.list, 'id', id, delObj);\n        del(id).then(function (response) {\n          if (response.status === 1) {\n            _this.$notify.success(response.msg);\n\n            _this.fetchList();\n          } else {\n            _this.$notify.error(response.msg);\n          }\n\n          var delObj = {\n            'delete': false\n          };\n          _this.list = tree.upadteArr(_this.list, 'id', id, delObj);\n        }).catch(function (error) {\n          var delObj = {\n            'delete': false\n          };\n          _this.list = tree.upadteArr(_this.list, 'id', id, delObj);\n        });\n      }).catch(function () {\n        _this3.$message({\n          type: 'info',\n          message: '已取消删除'\n        });\n      });\n    },\n    handleDeleteAll: function handleDeleteAll() {\n      var _this4 = this;\n\n      var _this = this;\n\n      if (this.selectedRows.length > 0) {\n        this.$confirm('此操作将永久删除该记录, 是否继续?', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        }).then(function () {\n          _this.deleting = true;\n          var ids = getArrByKey(_this.selectedRows, 'id');\n          var idstr = ids.join(',');\n          delAll({\n            ids: idstr\n          }).then(function (response) {\n            if (response.status === 1) {\n              _this.$message.success(response.msg);\n\n              _this.fetchList();\n            } else {\n              _this.$message.error(response.msg);\n            }\n\n            _this.deleting = false;\n          }).catch(function (error) {\n            _this.deleting = false;\n          });\n        }).catch(function () {\n          _this4.$message({\n            type: 'info',\n            message: '已取消删除'\n          });\n        });\n      } else {\n        _this.$message.error('请选择要删除的数据');\n      }\n    },\n    handleCommand: function handleCommand(command) {\n      var _this = this;\n\n      if (this.selectedRows.length > 0) {\n        var ids = getArrByKey(this.selectedRows, 'id');\n        var idstr = ids.join(',');\n        changeAll({\n          val: idstr,\n          field: 'status',\n          value: command\n        }).then(function (response) {\n          if (response.status === 1) {\n            _this.$message.success(response.msg);\n\n            _this.fetchList();\n          } else {\n            _this.$message.error(response.msg);\n          }\n        }).catch(function (error) {});\n      } else {\n        _this.$message.error('请选择要操作的数据');\n      }\n    }\n  }\n};",null]}