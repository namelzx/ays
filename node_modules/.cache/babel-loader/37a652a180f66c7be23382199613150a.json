{"remainingRequest":"/Users/liangzexiang/WebstormProjects/ays/node_modules/babel-loader/lib/index.js!/Users/liangzexiang/WebstormProjects/ays/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/liangzexiang/WebstormProjects/ays/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liangzexiang/WebstormProjects/ays/src/views/setting/city/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/liangzexiang/WebstormProjects/ays/src/views/setting/city/index.vue","mtime":1587402564000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/liangzexiang/WebstormProjects/ays/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"/Users/liangzexiang/WebstormProjects/ays/node_modules/@babel/runtime-corejs2/helpers/asyncToGenerator\"));\n\nvar _objectDestructuringEmpty2 = _interopRequireDefault(require(\"/Users/liangzexiang/WebstormProjects/ays/node_modules/@babel/runtime-corejs2/helpers/objectDestructuringEmpty\"));\n\nvar _position = require(\"@/api/position\");\n\nvar _vuedraggable = _interopRequireDefault(require(\"vuedraggable\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'index',\n  components: {\n    draggable: _vuedraggable.default\n  },\n  data: function data() {\n    return {\n      oneindex: undefined,\n      towindex: undefined,\n      sanindex: undefined,\n      pid: 0,\n      level: 1,\n      spid: undefined,\n      codeList: [],\n      //分类1\n      towlist: [],\n      //分类2\n      slist: [] //分类3\n\n    };\n  },\n  created: function created() {\n    this.getlist();\n  },\n  methods: {\n    //修改数据\n    handelEdit: function handelEdit(row) {\n      row.is_edit = 2; // const  index=this.codeList.indexOf(row);\n      // this.codeList[index].is_edit=2\n    },\n    getlist: function getlist() {\n      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var that = this;\n      var temp = {\n        pid: this.pid\n      };\n\n      if (type == 0) {\n        temp.pid = 1;\n      }\n\n      temp.level = this.level;\n      (0, _position.GetDataByList)(temp).then(function (res) {\n        if (type === 0) {\n          that.codeList = res.data;\n        }\n\n        if (type === 1) {\n          that.towlist = res.data;\n        }\n\n        if (type === 2) {\n          that.slist = res.data;\n        }\n      });\n    },\n    Delete: function Delete(row, type) {\n      var _this = this;\n\n      this.$confirm('确认删除此分类?删除后子分类也将被同时删除，分类下的单品将默认为未分类', '分类删除', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        (0, _position.GetIdByDelete)(row).then(function (res) {\n          if (type === 0) {\n            var index = _this.codeList.indexOf(row);\n\n            _this.codeList.splice(index, 1);\n\n            _this.towlist = [];\n            _this.slist = [];\n          }\n\n          if (type === 1) {\n            var _index = _this.towlist.indexOf(row);\n\n            _this.towlist.splice(_index, 1);\n\n            _this.slist = [];\n          }\n\n          if (type === 2) {\n            var _index2 = _this.slist.indexOf(row);\n\n            _this.slist.splice(_index2, 1);\n          }\n\n          _this.$message({\n            type: 'success',\n            message: '删除成功!'\n          });\n        });\n      }).catch(function () {\n        _this.$message({\n          type: 'info',\n          message: '已取消删除'\n        });\n      });\n    },\n    oneChange: function oneChange(row, type) {\n      var that = this;\n      row.is_edit = 1;\n\n      if (type === 0) {\n        that.pid = 0;\n      }\n\n      if (type === 1) {\n        that.pid = row.pid;\n      }\n\n      (0, _position.PostDataByAdd)(row).then(function (res) {\n        row.id = res.data.id;\n        setTimeout(function (_ref) {\n          (0, _objectDestructuringEmpty2.default)(_ref);\n          this.getlist(type);\n        }, 1000);\n      });\n    },\n    //添加分类\n    handelAdd: function handelAdd(type) {\n      if (type === 'one') {\n        this.codeList.push({\n          field_title: '',\n          is_edit: 2,\n          sort_order: this.codeList.length + 1\n        });\n      }\n\n      if (type === 'tow') {\n        if (this.oneindex === undefined) {\n          this.$message({\n            message: '上级分类没有被选中,麻烦再点击一次',\n            type: 'warning'\n          });\n          return;\n        }\n\n        this.towlist.push({\n          field_title: '',\n          is_edit: 2,\n          pid: this.oneindex,\n          sort_order: this.towlist.length + 1\n        });\n      }\n\n      if (type === 'san') {\n        if (this.towindex === undefined) {\n          this.$message({\n            message: '上级分类没有被选中,麻烦再点击一次',\n            type: 'warning'\n          });\n          return;\n        }\n\n        this.slist.push({\n          field_title: '',\n          is_edit: 2,\n          pid: this.towindex,\n          sort_order: this.slist.length + 1\n        });\n      }\n    },\n    handelClick: function handelClick(row) {\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      if (type === 0) {\n        this.oneindex = row.id;\n        this.towindex = undefined;\n        this.pid = row.id;\n        this.slist = [];\n\n        if (row.id !== undefined) {\n          this.getlist(1);\n        }\n      }\n\n      if (type == 1) {\n        this.towindex = row.id;\n        this.pid = row.id;\n        this.spid = row.id;\n\n        if (row.id !== undefined) {\n          this.getlist(2);\n        }\n      }\n\n      if (type == 2) {\n        this.sanindex = row.id;\n      }\n    },\n    datadragEnd: function () {\n      var _datadragEnd = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee(evt) {\n        var _this2 = this;\n\n        var arr, newArr;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                evt.preventDefault(); // console.log('拖动前的索引 :' + evt.oldIndex)\n                // console.log('拖动后的索引 :' + evt.newIndex)\n                // 遍历数组,将索引值赋值到对应的sort_order上面,完成排序\n\n                arr = this.codeList;\n                _context.next = 4;\n                return arr.map(function (item, i) {\n                  return {\n                    sort_order: i,\n                    id: item.id\n                  };\n                });\n\n              case 4:\n                newArr = _context.sent;\n                (0, _position.PostDataByUpSort)(newArr).then(function (res) {\n                  _this2.getlist();\n                }); // console.log(res)\n                // const { error, message } = res.data\n                // if (error == 0) {\n                //   this.$message.success(message)\n                // }\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function datadragEnd(_x) {\n        return _datadragEnd.apply(this, arguments);\n      }\n\n      return datadragEnd;\n    }(),\n    datadragEndtow: function () {\n      var _datadragEndtow = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(evt) {\n        var arr, newArr;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                evt.preventDefault(); // console.log('拖动前的索引 :' + evt.oldIndex)\n                // console.log('拖动后的索引 :' + evt.newIndex)\n                // 遍历数组,将索引值赋值到对应的sort_order上面,完成排序\n\n                arr = this.towlist;\n                _context2.next = 4;\n                return arr.map(function (item, i) {\n                  return {\n                    sort_order: i,\n                    id: item.id\n                  };\n                });\n\n              case 4:\n                newArr = _context2.sent;\n                (0, _position.PostDataByUpSort)(newArr).then(function (res) {// this.getlist()\n                });\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function datadragEndtow(_x2) {\n        return _datadragEndtow.apply(this, arguments);\n      }\n\n      return datadragEndtow;\n    }(),\n    datadragEndsan: function () {\n      var _datadragEndsan = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(evt) {\n        var arr, newArr;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                evt.preventDefault(); // console.log('拖动前的索引 :' + evt.oldIndex)\n                // console.log('拖动后的索引 :' + evt.newIndex)\n                // 遍历数组,将索引值赋值到对应的sort_order上面,完成排序\n\n                arr = this.slist;\n                _context3.next = 4;\n                return arr.map(function (item, i) {\n                  return {\n                    sort_order: i,\n                    id: item.id\n                  };\n                });\n\n              case 4:\n                newArr = _context3.sent;\n                (0, _position.PostDataByUpSort)(newArr).then(function (res) {// this.getlist()\n                });\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function datadragEndsan(_x3) {\n        return _datadragEndsan.apply(this, arguments);\n      }\n\n      return datadragEndsan;\n    }()\n  }\n};\nexports.default = _default;",null]}