{"remainingRequest":"/Users/liangzexiang/WebstormProjects/ays/node_modules/babel-loader/lib/index.js!/Users/liangzexiang/WebstormProjects/ays/src/utils/index.js","dependencies":[{"path":"/Users/liangzexiang/WebstormProjects/ays/src/utils/index.js","mtime":1587402564000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/liangzexiang/WebstormProjects/ays/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseTime = parseTime;\nexports.getNowTime = getNowTime;\nexports.formatTime = formatTime;\nexports.getQueryObject = getQueryObject;\nexports.getByteLen = getByteLen;\nexports.cleanArray = cleanArray;\nexports.param = param;\nexports.param2Obj = param2Obj;\nexports.html2Text = html2Text;\nexports.objectMerge = objectMerge;\nexports.scrollTo = scrollTo;\nexports.toggleClass = toggleClass;\nexports.getTime = getTime;\nexports.debounce = debounce;\nexports.deepClone = deepClone;\nexports.uniqueArr = uniqueArr;\nexports.getArrByKey = getArrByKey;\nexports.getArrAttrByKey = getArrAttrByKey;\nexports.formatImgToArr = formatImgToArr;\nexports.strRepeat = strRepeat;\nexports.pickerOptions = void 0;\n\nvar _readOnlyError2 = _interopRequireDefault(require(\"/Users/liangzexiang/WebstormProjects/ays/node_modules/@babel/runtime-corejs2/helpers/readOnlyError\"));\n\nrequire(\"core-js/modules/es6.set\");\n\nrequire(\"core-js/modules/es6.string.iterator\");\n\nrequire(\"core-js/modules/es6.array.from\");\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nvar _typeof2 = _interopRequireDefault(require(\"/Users/liangzexiang/WebstormProjects/ays/node_modules/@babel/runtime-corejs2/helpers/typeof\"));\n\n/**\n * xiegaolei\n */\nfunction parseTime(time, cFormat) {\n  if (arguments.length === 0) {\n    return null;\n  }\n\n  if (!time) {\n    return null;\n  }\n\n  var format = cFormat || '{y}-{m}-{d} {h}:{i}:{s}';\n  var date;\n\n  if ((0, _typeof2.default)(time) === 'object') {\n    date = time;\n  } else {\n    if (('' + time).length === 10) time = parseInt(time) * 1000;\n    date = new Date(time);\n  }\n\n  var formatObj = {\n    y: date.getFullYear(),\n    m: date.getMonth() + 1,\n    d: date.getDate(),\n    h: date.getHours(),\n    i: date.getMinutes(),\n    s: date.getSeconds(),\n    a: date.getDay()\n  };\n  var time_str = format.replace(/{(y|m|d|h|i|s|a)+}/g, function (result, key) {\n    var value = formatObj[key]; // Note: getDay() returns 0 on Sunday\n\n    if (key === 'a') {\n      return ['日', '一', '二', '三', '四', '五', '六'][value];\n    }\n\n    if (result.length > 0 && value < 10) {\n      value = '0' + value;\n    }\n\n    return value || 0;\n  });\n  return time_str;\n} // 当前时间戳\n\n\nfunction getNowTime() {\n  return parseInt(Date.now() / 1000);\n} // 格式化时间\n\n\nfunction formatTime(time, option) {\n  time = +time * 1000;\n  var d = new Date(time);\n  var now = Date.now();\n  var diff = (now - d) / 1000;\n\n  if (diff < 30) {\n    return '刚刚';\n  } else if (diff < 3600) {\n    // less 1 hour\n    return Math.ceil(diff / 60) + '分钟前';\n  } else if (diff < 3600 * 24) {\n    return Math.ceil(diff / 3600) + '小时前';\n  } else if (diff < 3600 * 24 * 2) {\n    return '1天前';\n  }\n\n  if (option) {\n    return parseTime(time, option);\n  } else {\n    return d.getMonth() + 1 + '月' + d.getDate() + '日' + d.getHours() + '时' + d.getMinutes() + '分';\n  }\n} // 解析url\n\n\nfunction getQueryObject(url) {\n  url = url == null ? window.location.href : url;\n  var search = url.substring(url.lastIndexOf('?') + 1);\n  var obj = {};\n  var reg = /([^?&=]+)=([^?&=]*)/g;\n  search.replace(reg, function (rs, $1, $2) {\n    var name = decodeURIComponent($1);\n    var val = decodeURIComponent($2);\n    val = String(val);\n    obj[name] = val;\n    return rs;\n  });\n  return obj;\n}\n/**\n *get getByteLen\n * @param {Sting} val input value\n * @returns {number} output value\n */\n\n\nfunction getByteLen(val) {\n  var len = 0;\n\n  for (var i = 0; i < val.length; i++) {\n    if (val[i].match(/[^\\x00-\\xff]/gi) != null) {\n      len += 1;\n    } else {\n      len += 0.5;\n    }\n  }\n\n  return Math.floor(len);\n}\n\nfunction cleanArray(actual) {\n  var newArray = [];\n\n  for (var i = 0; i < actual.length; i++) {\n    if (actual[i]) {\n      newArray.push(actual[i]);\n    }\n  }\n\n  return newArray;\n}\n\nfunction param(json) {\n  if (!json) return '';\n  return cleanArray(Object.keys(json).map(function (key) {\n    if (json[key] === undefined) return '';\n    return encodeURIComponent(key) + '=' + encodeURIComponent(json[key]);\n  })).join('&');\n}\n\nfunction param2Obj(url) {\n  var search = url.split('?')[1];\n\n  if (!search) {\n    return {};\n  }\n\n  return JSON.parse('{\"' + decodeURIComponent(search).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g, '\":\"') + '\"}');\n}\n\nfunction html2Text(val) {\n  var div = document.createElement('div');\n  div.innerHTML = val;\n  return div.textContent || div.innerText;\n}\n\nfunction objectMerge(target, source) {\n  /* Merges two  objects,\n     giving the last one precedence */\n  if ((0, _typeof2.default)(target) !== 'object') {\n    target = {};\n  }\n\n  if (Array.isArray(source)) {\n    return source.slice();\n  }\n\n  Object.keys(source).forEach(function (property) {\n    var sourceProperty = source[property];\n\n    if ((0, _typeof2.default)(sourceProperty) === 'object') {\n      target[property] = objectMerge(target[property], sourceProperty);\n    } else {\n      target[property] = sourceProperty;\n    }\n  });\n  return target;\n}\n\nfunction scrollTo(element, to, duration) {\n  if (duration <= 0) return;\n  var difference = to - element.scrollTop;\n  var perTick = difference / duration * 10;\n  setTimeout(function () {\n    element.scrollTop = element.scrollTop + perTick;\n    if (element.scrollTop === to) return;\n    scrollTo(element, to, duration - 10);\n  }, 10);\n}\n\nfunction toggleClass(element, className) {\n  if (!element || !className) {\n    return;\n  }\n\n  var classString = element.className;\n  var nameIndex = classString.indexOf(className);\n\n  if (nameIndex === -1) {\n    classString += '' + className;\n  } else {\n    classString = classString.substr(0, nameIndex) + classString.substr(nameIndex + className.length);\n  }\n\n  element.className = classString;\n}\n\nvar pickerOptions = [{\n  text: '今天',\n  onClick: function onClick(picker) {\n    var end = new Date();\n    var start = new Date(new Date().toDateString());\n    end.setTime(start.getTime());\n    picker.$emit('pick', [start, end]);\n  }\n}, {\n  text: '最近一周',\n  onClick: function onClick(picker) {\n    var end = new Date(new Date().toDateString());\n    var start = new Date();\n    start.setTime(end.getTime() - 3600 * 1000 * 24 * 7);\n    picker.$emit('pick', [start, end]);\n  }\n}, {\n  text: '最近一个月',\n  onClick: function onClick(picker) {\n    var end = new Date(new Date().toDateString());\n    var start = new Date();\n    start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\n    picker.$emit('pick', [start, end]);\n  }\n}, {\n  text: '最近三个月',\n  onClick: function onClick(picker) {\n    var end = new Date(new Date().toDateString());\n    var start = new Date();\n    start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\n    picker.$emit('pick', [start, end]);\n  }\n}];\nexports.pickerOptions = pickerOptions;\n\nfunction getTime(type) {\n  if (type === 'start') {\n    return new Date().getTime() - 3600 * 1000 * 24 * 90;\n  } else {\n    return new Date(new Date().toDateString());\n  }\n}\n\nfunction debounce(func, wait, immediate) {\n  var timeout, args, context, timestamp, result;\n\n  var later = function later() {\n    // 据上一次触发时间间隔\n    var last = +new Date() - timestamp; // 上次被包装函数被调用时间间隔last小于设定时间间隔wait\n\n    if (last < wait && last > 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null; // 如果设定为immediate===true，因为开始边界已经调用过了此处无需调用\n\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    context = this;\n    timestamp = +new Date();\n    var callNow = immediate && !timeout; // 如果延时不存在，重新设定延时\n\n    if (!timeout) timeout = setTimeout(later, wait);\n\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n}\n/**\n * This is just a simple version of deep copy\n * Has a lot of edge cases bug\n * If you want to use a perfect deep copy, use lodash's _.cloneDeep\n */\n\n\nfunction deepClone(source) {\n  if (!source && (0, _typeof2.default)(source) !== 'object') {\n    throw new Error('error arguments', 'shallowClone');\n  }\n\n  var targetObj = source.constructor === Array ? [] : {};\n  Object.keys(source).forEach(function (keys) {\n    if (source[keys] && (0, _typeof2.default)(source[keys]) === 'object') {\n      targetObj[keys] = deepClone(source[keys]);\n    } else {\n      targetObj[keys] = source[keys];\n    }\n  });\n  return targetObj;\n}\n\nfunction uniqueArr(arr) {\n  return Array.from(new Set(arr));\n}\n\nfunction getArrByKey(arr, key) {\n  var arrNew = [];\n\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i].hasOwnProperty(key)) {\n      arrNew.push(arr[i][key]);\n    }\n  }\n\n  return arrNew;\n}\n\nfunction getArrAttrByKey(arr, key, attr, v) {\n  var str = '';\n\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i].hasOwnProperty(key) && arr[i].hasOwnProperty(attr) && arr[i][key] == v) {\n      str = ((0, _readOnlyError2.default)(\"str\"), arr[i][attr]);\n    }\n  }\n\n  return str;\n}\n\nfunction formatImgToArr(imgStr) {\n  var imgarr = [];\n  var img = [];\n\n  if (imgStr === '') {\n    return [];\n  }\n\n  imgarr = imgStr.split(',');\n\n  for (var i = 0; i < imgarr.length; i++) {\n    img.push(imgarr[i]);\n  }\n\n  return img;\n}\n\nfunction strRepeat(str, num) {\n  return new Array(num + 1).join(str);\n}",null]}