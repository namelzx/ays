{"remainingRequest":"/Users/liangzexiang/WebstormProjects/ays/node_modules/babel-loader/lib/index.js!/Users/liangzexiang/WebstormProjects/ays/src/store/modules/user.js","dependencies":[{"path":"/Users/liangzexiang/WebstormProjects/ays/src/store/modules/user.js","mtime":1587402564000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"/Users/liangzexiang/WebstormProjects/ays/node_modules/@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"/Users/liangzexiang/WebstormProjects/ays/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"/Users/liangzexiang/WebstormProjects/ays/node_modules/@babel/runtime-corejs2/helpers/asyncToGenerator\"));\n\nrequire(\"core-js/modules/es6.function.name\");\n\nvar _user = require(\"@/api/user\");\n\nvar _auth = require(\"@/utils/auth\");\n\nvar _router = _interopRequireWildcard(require(\"@/router\"));\n\nvar _login2 = require(\"@/api/login\");\n\nvar state = {\n  token: (0, _auth.getToken)(),\n  name: '',\n  avatar: '',\n  introduction: '',\n  roles: [],\n  muenroles: [],\n  userinfo: {},\n  group: ''\n};\nvar mutations = {\n  SET_TOKEN: function SET_TOKEN(state, token) {\n    state.token = token;\n  },\n  SET_INTRODUCTION: function SET_INTRODUCTION(state, introduction) {\n    state.introduction = introduction;\n  },\n  SET_NAME: function SET_NAME(state, name) {\n    state.name = name;\n  },\n  SET_AVATAR: function SET_AVATAR(state, avatar) {\n    state.avatar = avatar;\n  },\n  SET_ROLES: function SET_ROLES(state, roles) {\n    state.roles = roles;\n  },\n  SET_MUEN: function SET_MUEN(state, roles) {\n    state.muenroles = roles;\n  },\n  SET_USERINFO: function SET_USERINFO(state, userinfo) {\n    state.userinfo = userinfo;\n  },\n  SET_CARLILSE: function SET_CARLILSE(state, data) {\n    state.brand = data;\n  },\n  SET_GROUP: function SET_GROUP(state, data) {\n    state.group = data;\n  }\n};\nvar actions = {\n  // user login\n  login: function login(_ref, userInfo) {\n    var commit = _ref.commit;\n    var username = userInfo.username,\n        password = userInfo.password;\n    return new Promise(function (resolve, reject) {\n      var temp = {\n        username: username.trim(),\n        password: password\n      };\n      (0, _user.login)(temp).then(function (response) {\n        console.log('触发登录');\n        var data = response.data;\n        console.log(data.userToken);\n        commit('SET_TOKEN', data.userToken);\n        (0, _auth.setToken)(data.userToken);\n        resolve();\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  // get user info\n  getInfo: function getInfo(_ref2) {\n    var commit = _ref2.commit,\n        state = _ref2.state;\n    return new Promise(function (resolve, reject) {\n      (0, _user.getInfo)(state.token).then(function (response) {\n        var data = response.data;\n\n        if (!data) {\n          reject('验证失败,请重新登录');\n        }\n\n        var roles = data.roles,\n            name = data.name,\n            avatar = data.avatar,\n            introduction = data.introduction;\n        console.log(data); // roles must be a non-empty array\n\n        if (data.access && data.groupId > 0) {\n          commit('SET_ROLES', data.groupId);\n        } else {\n          reject('拉取用户权限失败');\n        } // console.log(data.access)\n\n\n        commit('SET_MUEN', data.access); // commit('SET_ROLES', roles)\n\n        commit('SET_NAME', name);\n        commit('SET_AVATAR', avatar);\n        commit('SET_INTRODUCTION', introduction);\n        resolve(data);\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  // user logout\n  logout: function logout(_ref3) {\n    var commit = _ref3.commit,\n        state = _ref3.state,\n        dispatch = _ref3.dispatch;\n    return new Promise(function (resolve) {\n      commit('SET_TOKEN', '');\n      commit('SET_ROLES', 0);\n      (0, _auth.removeToken)();\n      resolve();\n    });\n  },\n  // remove token\n  resetToken: function resetToken(_ref4) {\n    var commit = _ref4.commit;\n    return new Promise(function (resolve) {\n      commit('SET_TOKEN', '');\n      commit('SET_ROLES', []);\n      (0, _auth.removeToken)();\n      resolve();\n    });\n  },\n  // 获取用户信息\n  GetUserInfo: function GetUserInfo(_ref5) {\n    var commit = _ref5.commit,\n        state = _ref5.state;\n    return new Promise(function (resolve, reject) {\n      (0, _login2.getUserInfo)().then(function (response) {\n        if (!response.data) {\n          // 由于mockjs 不支持自定义状态码只能这样hack\n          reject('error');\n        }\n\n        var data = response.data;\n\n        if (data.access && data.groupId > 0) {\n          commit('SET_ROLES', data.groupId);\n        } else {\n          reject('拉取用户权限失败');\n        }\n\n        commit('SET_MUEN', data.access);\n        commit('SET_NAME', data.userName); // commit('SET_AVATAR', data.img)\n\n        commit('SET_USERINFO', data); // commit('SET_REALNAME', data.realName)\n        // commit('SET_PHONE', data.phone)\n        // commit('SET_EMAIL', data.email)\n\n        commit('SET_GROUP', data.group); // commit('SET_ADMIN', data.id)\n\n        resolve(response);\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  // dynamically modify permissions\n  changeRoles: function changeRoles(_ref6, role) {\n    var commit = _ref6.commit,\n        dispatch = _ref6.dispatch;\n    return new Promise( /*#__PURE__*/function () {\n      var _ref7 = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee(resolve) {\n        var token, _yield$dispatch, roles, accessRoutes;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                token = role + '-token';\n                commit('SET_TOKEN', token);\n                (0, _auth.setToken)(token);\n                _context.next = 5;\n                return dispatch('getInfo');\n\n              case 5:\n                _yield$dispatch = _context.sent;\n                roles = _yield$dispatch.roles;\n                (0, _router.resetRouter)(); // generate accessible routes map based on roles\n\n                _context.next = 10;\n                return dispatch('permission/GenerateRoutes', roles, {\n                  root: true\n                });\n\n              case 10:\n                accessRoutes = _context.sent;\n\n                // dynamically add accessible routes\n                _router.default.addRoutes(accessRoutes); // reset visited views and cached views\n\n\n                dispatch('tagsView/delAllViews', null, {\n                  root: true\n                });\n                resolve();\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n  }\n};\nvar _default = {\n  namespaced: true,\n  state: state,\n  mutations: mutations,\n  actions: actions\n};\nexports.default = _default;",null]}