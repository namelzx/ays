{"remainingRequest":"/Users/liangzexiang/WebstormProjects/ays/node_modules/thread-loader/dist/cjs.js!/Users/liangzexiang/WebstormProjects/ays/node_modules/babel-loader/lib/index.js!/Users/liangzexiang/WebstormProjects/ays/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/liangzexiang/WebstormProjects/ays/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liangzexiang/WebstormProjects/ays/src/views/manage/rules/form.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/liangzexiang/WebstormProjects/ays/src/views/manage/rules/form.vue","mtime":1587402564000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getinfo, save } from '@/api/rules';\nimport tree from '@/utils/tree';\nexport default {\n  name: 'RulesForm',\n  components: {},\n  props: {\n    ruleList: {\n      type: Array,\n      default: []\n    }\n  },\n  data: function data() {\n    return {\n      btnLoading: false,\n      ruleTop: [{\n        'id': 0,\n        'title': '顶级'\n      }],\n      pid: [],\n      props_pid: {\n        'label': 'title',\n        'value': 'id'\n      },\n      temp: {\n        id: 0,\n        pid: 0,\n        title: '',\n        name: '',\n        status: 1,\n        icon: '',\n        path: '',\n        sorts: 99,\n        component: 'layout',\n        hidden: 0,\n        noCache: 1,\n        alwaysShow: 1,\n        redirect: 'noredirect'\n      },\n      dialogFormVisible: false,\n      dialogStatus: '',\n      textMap: {\n        update: '编辑',\n        create: '添加'\n      },\n      rules: {\n        title: [{\n          required: true,\n          message: '名称必填',\n          trigger: 'blur'\n        }],\n        name: [{\n          required: true,\n          message: '标识必填',\n          trigger: 'blur'\n        }],\n        sorts: [{\n          required: true,\n          message: '排序必填',\n          trigger: 'blur'\n        }],\n        icon: [{\n          required: true,\n          message: '图标必填',\n          trigger: 'blur'\n        }],\n        path: [{\n          required: true,\n          message: '路径必填',\n          trigger: 'blur'\n        }],\n        component: [{\n          required: true,\n          message: '组件必填',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  computed: {\n    getRulesList: function getRulesList() {\n      return this.ruleTop.concat(tree.listToTreeMulti(this.ruleList));\n    }\n  },\n  watch: {\n    dialogFormVisible: function dialogFormVisible() {\n      this.resetTemp();\n    },\n    temp: {\n      handler: function handler(newVal, oldVal) {},\n      immediate: true,\n      deep: true\n    }\n  },\n  created: function created() {},\n  destroyed: function destroyed() {},\n  methods: {\n    resetTemp: function resetTemp() {\n      this.temp = {\n        id: 0,\n        pid: 0,\n        title: '',\n        name: '',\n        status: 1,\n        icon: '',\n        path: '',\n        component: 'layout/Layout',\n        hidden: 0,\n        noCache: 1,\n        sorts: 99,\n        alwaysShow: 1,\n        redirect: 'noredirect'\n      };\n    },\n    handleCreate: function handleCreate() {\n      var _this2 = this;\n\n      this.dialogStatus = 'create';\n      this.dialogFormVisible = true;\n      this.currentIndex = -1;\n      this.pid = [];\n      this.$nextTick(function () {\n        _this2.$refs['dataForm'].clearValidate();\n      });\n    },\n    handleUpdate: function handleUpdate(id) {\n      var _this3 = this;\n\n      this.dialogStatus = 'update';\n      this.dialogFormVisible = true;\n\n      var _this = this;\n\n      getinfo(id).then(function (response) {\n        if (response.status === 1) {\n          _this.temp.id = response.data.id;\n          _this.temp.pid = response.data.pid;\n          _this.temp.title = response.data.title;\n          _this.temp.name = response.data.name;\n          _this.temp.status = response.data.status;\n          _this.temp.icon = response.data.icon;\n          _this.temp.path = response.data.path;\n          _this.temp.component = response.data.component;\n          _this.temp.hidden = response.data.hidden;\n          _this.temp.noCache = response.data.noCache;\n          _this.temp.alwaysShow = response.data.alwaysShow;\n          _this.temp.redirect = response.data.redirect;\n          _this.temp.sorts = response.data.sorts;\n          _this.pid = tree.getParentsId(_this3.ruleList, id);\n        }\n      });\n      this.$nextTick(function () {\n        _this3.$refs['dataForm'].clearValidate();\n      });\n    },\n    saveData: function saveData() {\n      var _this4 = this;\n\n      this.btnLoading = true;\n      this.$refs['dataForm'].validate(function (valid) {\n        if (valid) {\n          var _this = _this4;\n          var d = _this4.temp;\n          save(d).then(function (response) {\n            if (response.status === 1) {\n              if (!d.id) {\n                d.id2 = response.data.id;\n              }\n\n              _this4.$emit('updateRow', d);\n\n              _this.dialogFormVisible = false;\n\n              _this.$message.success(response.msg);\n            } else {\n              _this.$message.error(response.msg);\n            }\n\n            _this.btnLoading = false;\n          }).catch(function (error) {\n            _this4.btnLoading = false;\n          });\n        } else {\n          _this4.btnLoading = false;\n        }\n      });\n    },\n    handleChange: function handleChange(value) {\n      if (value.length) {\n        this.temp.pid = value[value.length - 1];\n      }\n    }\n  }\n};",null]}