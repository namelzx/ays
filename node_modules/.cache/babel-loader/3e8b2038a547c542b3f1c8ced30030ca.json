{"remainingRequest":"/Users/liangzexiang/WebstormProjects/ays/node_modules/babel-loader/lib/index.js!/Users/liangzexiang/WebstormProjects/ays/src/utils/tree.js","dependencies":[{"path":"/Users/liangzexiang/WebstormProjects/ays/src/utils/tree.js","mtime":1587402564000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _utils = require(\"@/utils\");\n\n/**\n * xiegaolei\n */\n// 递归格式化成多维数组\nfunction listToTreeMulti(list) {\n  var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var pk = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'id';\n  var pid = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'pid';\n  var child = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'children';\n  var other = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n  var tree = [];\n\n  if (list) {\n    list.forEach(function (item) {\n      if (item[pid] === root) {\n        if (other !== null) {\n          item = (0, _utils.objectMerge)(item, other);\n        }\n\n        var children = listToTreeMulti(list, item[pk], pk, pid, child, other);\n\n        if (children.length) {\n          item[child] = children;\n        }\n\n        tree.push(item);\n      }\n    });\n  }\n\n  return tree;\n}\n\nfunction getParentsId(list, id) {\n  var pk = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'id';\n  var pid = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'pid';\n  var tree = [];\n\n  if (list) {\n    list.forEach(function (item) {\n      if (item[pk] === id) {\n        tree.unshift(item[pid]);\n        var parent = getParentsId(list, item[pid], pk, pid);\n\n        if (parent.length) {\n          tree = tree.concat(parent);\n        }\n      }\n    });\n  }\n\n  return tree;\n} // 递归修改值\n\n\nfunction upadteArr(arr, attr, val, source) {\n  if (arr) {\n    arr.map(function (item) {\n      if (item[attr] === val) {\n        (0, _utils.objectMerge)(item, source);\n      } else {\n        upadteArr(item.children, attr, val, source);\n      }\n    });\n  }\n\n  return arr;\n}\n\nvar tree = {\n  listToTreeMulti: listToTreeMulti,\n  getParentsId: getParentsId,\n  upadteArr: upadteArr\n};\nvar _default = tree;\nexports.default = _default;",null]}