{"remainingRequest":"/Users/liangzexiang/WebstormProjects/ays/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liangzexiang/WebstormProjects/ays/src/views/manage/rules.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/liangzexiang/WebstormProjects/ays/src/views/manage/rules.vue","mtime":1587402564000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getList, del, change, delAll, changeAll } from '@/api/rules'\nimport waves from '@/directive/waves' // 水波纹指令\nimport { getArrByKey } from '@/utils'\nimport tree from '@/utils/tree'\nimport rulesForm from './rules/form'\nimport treeTable from '@/components/TreeTable'\n\nexport default {\n  name: 'Rules',\n  components: { rulesForm, treeTable },\n  directives: {\n    waves\n  },\n  filters: {\n    statusFilter(status) {\n      const statusMap = {\n        0: '禁用',\n        1: '正常'\n      }\n      return statusMap[status]\n    }\n  },\n  data() {\n    return {\n      tableKey: 0,\n      list: [],\n\n      selectedRows: null,\n      listLoading: true,\n      expandAll: true,\n      columns: [\n        {\n          text: '名称',\n          value: 'title'\n        }\n      ],\n      listQuery: {\n        status: '-1',\n        title: ''\n      },\n      buttonDisabled: true,\n      deleting: false\n    }\n  },\n  computed: {\n    getRulesList() {\n      return tree.listToTreeMulti(this.list, 0, 'id', 'pid', 'children', { 'delete': false })\n    }\n  },\n  watch: {\n  },\n  created() {\n    this.fetchList()\n  },\n  methods: {\n    fetchList() {\n      this.listLoading = true\n      getList(this.listQuery).then(response => {\n        this.list = response.data.data\n\n        this.listLoading = false\n      })\n    },\n    handleFilterClear() {\n      this.listQuery = {\n        status: '-1',\n        title: ''\n      }\n      this.fetchList()\n    },\n    handleSelectionChange(val) {\n      if (val.length > 0) {\n        this.buttonDisabled = false\n      } else {\n        this.buttonDisabled = true\n      }\n      this.selectedRows = val\n    },\n    handleCreate() {\n      this.$refs.fromRules.handleCreate()\n    },\n    handleUpdate(index, id) {\n      this.$refs.fromRules.handleUpdate(id)\n    },\n    handleModifyStatus(index, id, status) {\n      const statusObj = { 'status': 1 - status }\n      this.list = tree.upadteArr(this.list, 'id', id, statusObj)\n      change(id, 'status', 1 - status).then(response => {})\n    },\n    updateRow(temp) {\n      this.fetchList()\n    },\n    handleDelete(index, id) {\n      const _this = this\n      this.$confirm('此操作将永久删除该记录, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        const delObj = { 'delete': true }\n        _this.list = tree.upadteArr(_this.list, 'id', id, delObj)\n        del(id).then(response => {\n          if (response.status === 1) {\n            _this.$notify.success(response.msg)\n            _this.fetchList()\n          } else {\n            _this.$notify.error(response.msg)\n          }\n          const delObj = { 'delete': false }\n          _this.list = tree.upadteArr(_this.list, 'id', id, delObj)\n        }).catch((error) => {\n          const delObj = { 'delete': false }\n          _this.list = tree.upadteArr(_this.list, 'id', id, delObj)\n        })\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消删除'\n        })\n      })\n    },\n    handleDeleteAll() {\n      const _this = this\n      if (this.selectedRows.length > 0) {\n        this.$confirm('此操作将永久删除该记录, 是否继续?', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        }).then(() => {\n          _this.deleting = true\n          const ids = getArrByKey(_this.selectedRows, 'id')\n          const idstr = ids.join(',')\n          delAll({ ids: idstr }).then(response => {\n            if (response.status === 1) {\n              _this.$message.success(response.msg)\n              _this.fetchList()\n            } else {\n              _this.$message.error(response.msg)\n            }\n            _this.deleting = false\n          }).catch((error) => {\n            _this.deleting = false\n          })\n        }).catch(() => {\n          this.$message({\n            type: 'info',\n            message: '已取消删除'\n          })\n        })\n      } else {\n        _this.$message.error('请选择要删除的数据')\n      }\n    },\n    handleCommand(command) {\n      const _this = this\n      if (this.selectedRows.length > 0) {\n        const ids = getArrByKey(this.selectedRows, 'id')\n        const idstr = ids.join(',')\n        changeAll({ val: idstr, field: 'status', value: command }).then(response => {\n          if (response.status === 1) {\n            _this.$message.success(response.msg)\n            _this.fetchList()\n          } else {\n            _this.$message.error(response.msg)\n          }\n        }).catch((error) => {\n        })\n      } else {\n        _this.$message.error('请选择要操作的数据')\n      }\n    }\n  }\n}\n",null]}