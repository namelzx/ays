{"remainingRequest":"/Users/liangzexiang/WebstormProjects/ays/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liangzexiang/WebstormProjects/ays/src/views/manage/roles/form.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/liangzexiang/WebstormProjects/ays/src/views/manage/roles/form.vue","mtime":1587402564000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getListAll } from '@/api/rules'\nimport { getinfo, save } from '@/api/roles'\nimport tree from '@/utils/tree'\n\nexport default {\n  name: 'RolesForm',\n  data() {\n    return {\n      btnLoading: false,\n      ruleList: [],\n      temp: {\n        id: 0,\n        title: '',\n        status: 1,\n        rules: ''\n      },\n      dialogFormVisible: false,\n      dialogStatus: '',\n      textMap: {\n        update: '编辑',\n        create: '添加'\n      },\n      rules: {\n        title: [{ required: true, message: '名称必填', trigger: 'blur' }]\n      },\n      defaultChecked: [],\n      defaultProps: {\n        children: 'children',\n        label: 'title'\n      }\n\n    }\n  },\n  computed: {\n    getRulesList() {\n      console.log(tree.listToTreeMulti(this.ruleList))\n      return tree.listToTreeMulti(this.ruleList)\n    }\n  },\n  watch: {\n    dialogFormVisible: function() {\n      this.resetTemp()\n    }\n  },\n  created() {\n    this.getRules()\n  },\n  destroyed() {\n  },\n  methods: {\n    getRules() {\n      getListAll().then(response => {\n        this.ruleList = response.data\n      })\n    },\n    resetTemp() {\n      this.temp = {\n        id: 0,\n        title: '',\n        status: 1,\n        rules: ''\n      }\n    },\n    checkHandle(data) {\n      const halfCheckedKeys = this.$refs.tree.getHalfCheckedKeys().join(',')\n      const checkedKeys = this.$refs.tree.getCheckedKeys().join(',')\n      if (halfCheckedKeys.length && checkedKeys.length) {\n        this.temp.rules = halfCheckedKeys + ',' + checkedKeys\n      } else if (halfCheckedKeys.length && checkedKeys.length === 0) {\n        this.temp.rules = halfCheckedKeys\n      } else if (halfCheckedKeys.length === 0 && checkedKeys.length) {\n        this.temp.rules = checkedKeys\n      } else {\n        this.temp.rules = ''\n      }\n    },\n    handleCreate() {\n      this.dialogStatus = 'create'\n      this.dialogFormVisible = true\n      this.currentIndex = -1\n      this.$refs.tree.setCheckedKeys([])\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    handleUpdate(id) {\n      this.dialogStatus = 'update'\n      this.dialogFormVisible = true\n      const _this = this\n      getinfo(id).then(response => {\n        if (response.status === 1) {\n          _this.temp.id = response.data.id\n          _this.temp.title = response.data.title\n          _this.temp.status = response.data.status\n          _this.temp.rules = response.data.rules\n          this.$refs.tree.setCheckedKeys(_this.temp.rules.split(','))\n        }\n      })\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    saveData() {\n      this.btnLoading = true\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          const _this = this\n          const d = this.temp\n\n          save(d).then(response => {\n            if (response.status === 1) {\n              if (!d.id) {\n                d.id = response.data.id\n              }\n              this.$emit('updateRow', d)\n              _this.dialogFormVisible = false\n              _this.$message.success(response.msg)\n            } else {\n              _this.$message.error(response.msg)\n            }\n            _this.btnLoading = false\n          }).catch((error) => {\n            this.btnLoading = false\n          })\n        } else {\n          this.btnLoading = false\n        }\n      })\n    }\n  }\n}\n",null]}