{"remainingRequest":"/Users/liangzexiang/WebstormProjects/ays/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liangzexiang/WebstormProjects/ays/src/views/cost/install/create.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/liangzexiang/WebstormProjects/ays/src/views/cost/install/create.vue","mtime":1587402564000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters } from \"vuex\";\nimport { GetProductByTree } from \"@/api/product\";\n\nimport { validURL } from \"@/utils/validate\";\nimport { fetchArticle } from \"@/api/article\";\nimport { GetProductByAll, GetDataProductByList } from \"@/api/product\";\n\nimport { CarBrand } from \"@/api/tools\";\n\nimport { GetDataByList } from \"@/api/ecshop\";\n\nimport { PostDataByAdd } from \"@/api/order\";\n\nimport { GetBrandByList, GetModelByList, GetSeriesByList } from \"@/api/car\";\nimport { regionDataPlus } from \"element-china-area-data\";\n\nimport { searchUser } from \"@/api/remote-search\";\n\nconst defaultForm = {\n  openid: \"\",\n  lazada_id: \"\",\n  lazada_list: \"\",\n  lazada_index: \"\",\n  buy_order_no: \"\",\n  buy_account: \"\",\n  buy_product_id: \"\",\n  no_price: \"\",\n  contact: \"\",\n  tel: \"\",\n  city_code: [],\n  city_desc: \"\",\n  number_plate: \"\",\n  car_model: \"\",\n  car_index: \"\",\n  car_model_id: \"\",\n  car_model_id: \"\"\n};\n\nexport default {\n  name: \"ArticleDetail\",\n  // props: {\n  //   isEdit: {\n  //     type: Boolean,\n  //     default: false\n  //   }\n  // },\n  data() {\n    const validateRequire = (rule, value, callback) => {\n      if (value === \"\") {\n        this.$message({\n          message: rule.field + \"为必传项\",\n          type: \"error\"\n        });\n        callback(new Error(rule.field + \"为必传项\"));\n      } else {\n        callback();\n      }\n    };\n    const validateSourceUri = (rule, value, callback) => {\n      if (value) {\n        if (validURL(value)) {\n          callback();\n        } else {\n          this.$message({\n            message: \"外链url填写不正确\",\n            type: \"error\"\n          });\n          callback(new Error(\"外链url填写不正确\"));\n        }\n      } else {\n        callback();\n      }\n    };\n    return {\n      brandid: \"\", // 品牌id\n      series_id: \"\", // 车系id\n      model_id: undefined, // 车型id\n      ecshop: [], // 平台商家\n      productTree: [], // 产品树\n      cityoptions: regionDataPlus,\n      cityselectedOptions: [],\n      postForm: Object.assign({}, defaultForm),\n      loading: false,\n      userListOptions: [],\n      vmindex: \"\",\n      rules: {\n        image_uri: [{ validator: validateRequire }],\n        title: [{ validator: validateRequire }],\n        content: [{ validator: validateRequire }],\n        source_uri: [{ validator: validateSourceUri, trigger: \"blur\" }]\n      },\n      tempRoute: {},\n      product: [],\n      selectedRegion: [], // 选中的车型下标\n      selectedShop: [], // 选中的平台下标\n      regionHiera: [],\n      listechsop: {\n        pid: undefined\n      }\n    };\n  },\n  computed: {\n    ...mapGetters([\"carList\", \"userinfo\"]),\n    contentShortLength() {\n      return this.postForm.content_short.length;\n    },\n    displayTime: {\n      // set and get is useful when the data\n      // returned by the back end api is different from the front end\n      // back end return => \"2013-06-25 06:59:25\"\n      // front end need timestamp => 1372114765000\n      get() {\n        return +new Date(this.postForm.display_time);\n      },\n      set(val) {\n        this.postForm.display_time = new Date(val);\n      }\n    }\n  },\n  created() {\n    CarBrand().then(res => {\n      this.regionHiera = res.data;\n    });\n\n    GetProductByTree().then(res => {\n      this.productTree = res.data;\n    });\n    this.getecshop();\n    this.getProduct();\n    this.tempRoute = Object.assign({}, this.$route);\n  },\n  methods: {\n    getProduct(pid = 0) {\n      var temp = {\n        pid\n      };\n      GetProductByAll(temp).then(res => {\n        this.product = res.data;\n      });\n      if (this.isEdit) {\n        const id = this.$route.params && this.$route.params.id;\n        this.fetchData(id);\n      }\n    },\n    getecshop(type = 0, val = []) {\n      GetDataByList(this.listechsop).then(res => {\n        if (type === 0) {\n          const arr = [];\n          for (let i = 0; i < res.data.length; i++) {\n            arr.push({\n              label: res.data[i].field_title,\n              id: res.data[i].id,\n              value: i,\n              children: []\n            });\n          }\n          this.ecshop = arr;\n        }\n        if (type === 1) {\n          const arr = [];\n          for (let i = 0; i < res.data.length; i++) {\n            arr.push({\n              label: res.data[i].field_title,\n              id: res.data[i].id,\n              value: i\n            });\n          }\n          if (res.data.length === 0) {\n            this.ecshop[val[0]].children = undefined;\n          } else {\n            this.ecshop[val[0]].children = arr;\n          }\n        }\n      });\n    },\n    handelNodes(e) {\n      console.log(e);\n    },\n\n    handleEcshopChange(val) {\n      this.listechsop.pid = this.ecshop[val[0]].id;\n      this.getecshop(1, val);\n      this.selectedShop = val;\n    },\n\n    fetchData(id) {\n      fetchArticle(id)\n        .then(response => {\n          this.postForm = response.data;\n\n          // just for test\n          this.postForm.title += `   Article Id:${this.postForm.id}`;\n          this.postForm.content_short += `   Article Id:${this.postForm.id}`;\n\n          // set tagsview title\n          this.setTagsViewTitle();\n\n          // set page title\n          this.setPageTitle();\n        })\n        .catch(err => {\n          console.log(err);\n        });\n    },\n    setTagsViewTitle() {\n      const title = \"Edit Article\";\n      const route = Object.assign({}, this.tempRoute, {\n        title: `${title}-${this.postForm.id}`\n      });\n      this.$store.dispatch(\"tagsView/updateVisitedView\", route);\n    },\n    setPageTitle() {\n      const title = \"Edit Article\";\n      document.title = `${title} - ${this.postForm.id}`;\n    },\n    submitForm() {\n      if (this.selectedShop.length < 1) {\n        this.$message.error(\"购买平台必选\");\n        return;\n      }\n      this.postForm.car_model_id = this.selectedRegion[\n        this.selectedRegion.length - 1\n      ];\n      this.postForm.lazada_index = this.selectedShop.join(\",\"); // 下标 最多两个\n\n      // 处理购买平台数据\n      // this.postForm.lazada_list = ''\n      this.postForm.lazada_list = this.ecshop[this.selectedShop[0]].id;\n      this.postForm.lazada_id = this.ecshop[this.selectedShop[0]].id;\n      this.postForm.lazada_index = this.selectedShop.join(\",\");\n      if (this.ecshop[this.selectedShop[0]].children !== undefined) {\n        this.postForm.lazada_list =\n          this.postForm.lazada_list +\n          \",\" +\n          this.ecshop[this.selectedShop[0]].children[this.selectedShop[1]].id;\n        this.postForm.lazada_id = this.ecshop[this.selectedShop[0]].children[\n          this.selectedShop[1]\n        ].id;\n      }\n      this.postForm.car_model = this.postForm.car_model.join(\",\");\n      this.postForm.city_code = this.postForm.city_code.join(\",\");\n      //\n      this.postForm.buy_product_id = this.postForm.buy_product_id.join(\",\");\n      this.postForm.logcontent =\n        \"待处理\" + \" \" + this.userinfo.realName + \"提交订单\";\n      PostDataByAdd(this.postForm).then(res => {\n        this.postForm.car_model = this.postForm.car_model.split(\",\");\n\n        this.$router.go(-1); // 返回上一层\n        this.$message.success(\"操作成功\");\n      });\n    },\n    draftForm() {\n      if (\n        this.postForm.content.length === 0 ||\n        this.postForm.title.length === 0\n      ) {\n        this.$message({\n          message: \"请填写必要的标题和内容\",\n          type: \"warning\"\n        });\n        return;\n      }\n      this.$message({\n        message: \"保存成功\",\n        type: \"success\",\n        showClose: true,\n        duration: 1000\n      });\n      this.postForm.status = \"draft\";\n    },\n    getRemoteUserList(query) {\n      searchUser(query).then(response => {\n        if (!response.data.items) return;\n        this.userListOptions = response.data.items.map(v => v.name);\n      });\n    }\n  }\n};\n",null]}