{"remainingRequest":"/Users/liangzexiang/WebstormProjects/ays/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liangzexiang/WebstormProjects/ays/src/views/setting/shop/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/liangzexiang/WebstormProjects/ays/src/views/setting/shop/index.vue","mtime":1587402564000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { GetDataByList, GetIdByDelete, PostDataByAdd, PostDataByUpSort } from '@/api/ecshop'\nimport draggable from 'vuedraggable'\n\nexport default {\n  name: 'index',\n  components: { draggable },\n  data() {\n    return {\n      oneindex: undefined,\n      towindex: undefined,\n      sanindex: undefined,\n      pid: 0,\n      spid: undefined,\n      codeList: [],//分类1\n      towlist: [],//分类2\n      slist: []//分类3\n    }\n  },\n  created() {\n    this.getlist()\n  },\n  methods: {\n    //修改数据\n    handelEdit(row) {\n      row.is_edit = 2\n      // const  index=this.codeList.indexOf(row);\n      // this.codeList[index].is_edit=2\n    },\n    getlist(type = 0) {\n      var temp = {\n        pid: this.pid\n      }\n      if (type == 0) {\n        temp.pid = 0\n      }\n      var that = this\n      GetDataByList(temp).then(res => {\n        if (type === 0) {\n          that.codeList = res.data\n        }\n        if (type === 1) {\n          that.towlist = res.data\n        }\n        if (type === 2) {\n          that.slist = res.data\n        }\n      })\n    },\n    Delete(row, type) {\n      this.$confirm('确认删除此分类?删除后子分类也将被同时删除，分类下的单品将默认为未分类', '分类删除', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n\n        GetIdByDelete(row).then(res => {\n          if (type === 0) {\n            const index = this.codeList.indexOf(row)\n            this.codeList.splice(index, 1)\n            this.towlist=[];\n            this.slist=[];\n          }\n          if (type === 1) {\n            const index = this.towlist.indexOf(row)\n            this.towlist.splice(index, 1)\n            this.slist=[]\n          }\n\n          if (type === 2) {\n            const index = this.slist.indexOf(row)\n            this.slist.splice(index, 1)\n          }\n\n          this.$message({\n            type: 'success',\n            message: '删除成功!'\n          })\n        })\n\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消删除'\n        })\n      })\n\n    },\n    oneChange(row, type) {\n      var that = this\n      row.is_edit = 1\n      if (type === 0) {\n        that.pid = 0\n      }\n\n      if (type === 1) {\n        that.pid = row.pid\n      }\n      PostDataByAdd(row).then(res => {\n        row.id = res.data.id\n        setTimeout(function({}) {\n          this.getlist(type)\n        }, 1000)\n\n      })\n\n    },\n    //添加分类\n    handelAdd(type) {\n      if (type === 'one') {\n        this.codeList.push({ field_title: '', is_edit: 2, sort_order: this.codeList.length + 1 })\n      }\n      if (type === 'tow') {\n\n        if (this.oneindex === undefined) {\n          this.$message({\n            message: '上级分类没有被选中,麻烦再点击一次',\n            type: 'warning'\n          });\n          return\n        }\n        this.towlist.push({ field_title: '', is_edit: 2, pid: this.oneindex, sort_order: this.towlist.length + 1 })\n      }\n\n      if (type === 'san') {\n\n        if (this.towindex === undefined) {\n          this.$message({\n            message: '上级分类没有被选中,麻烦再点击一次',\n            type: 'warning'\n          });\n          return\n        }\n        this.slist.push({ field_title: '', is_edit: 2, pid: this.towindex, sort_order: this.slist.length + 1 })\n      }\n\n    },\n    handelClick(row, type = 0) {\n\n      if (type === 0) {\n        this.oneindex = row.id\n        this.towindex = undefined\n        this.pid = row.id\n        this.slist = []\n        if (row.id !== undefined) {\n\n          this.getlist(1)\n        }\n      }\n      if (type == 1) {\n        this.towindex = row.id\n        this.pid = row.id\n        this.spid = row.id\n        if (row.id !== undefined) {\n          this.getlist(2)\n        }\n      }\n\n      if (type == 2) {\n        this.sanindex = row.id\n\n      }\n    },\n    async datadragEnd(evt) {\n      evt.preventDefault()\n      // console.log('拖动前的索引 :' + evt.oldIndex)\n      // console.log('拖动后的索引 :' + evt.newIndex)\n      // 遍历数组,将索引值赋值到对应的sort_order上面,完成排序\n      let arr = this.codeList\n      let newArr = await arr.map((item, i) => {\n        return {\n          sort_order: i,\n          id: item.id\n        }\n      })\n      PostDataByUpSort(newArr).then(res => {\n        this.getlist()\n      })\n\n      // console.log(res)\n      // const { error, message } = res.data\n      // if (error == 0) {\n      //   this.$message.success(message)\n      // }\n    },\n    async datadragEndtow(evt) {\n      evt.preventDefault()\n      // console.log('拖动前的索引 :' + evt.oldIndex)\n      // console.log('拖动后的索引 :' + evt.newIndex)\n      // 遍历数组,将索引值赋值到对应的sort_order上面,完成排序\n      let arr = this.towlist\n      let newArr = await arr.map((item, i) => {\n        return {\n          sort_order: i,\n          id: item.id\n        }\n      })\n      PostDataByUpSort(newArr).then(res => {\n        // this.getlist()\n      })\n\n    },\n    async datadragEndsan(evt) {\n      evt.preventDefault()\n      // console.log('拖动前的索引 :' + evt.oldIndex)\n      // console.log('拖动后的索引 :' + evt.newIndex)\n      // 遍历数组,将索引值赋值到对应的sort_order上面,完成排序\n      let arr = this.slist\n      let newArr = await arr.map((item, i) => {\n        return {\n          sort_order: i,\n          id: item.id\n        }\n      })\n      PostDataByUpSort(newArr).then(res => {\n        // this.getlist()\n      })\n\n    }\n  }\n}\n",null]}