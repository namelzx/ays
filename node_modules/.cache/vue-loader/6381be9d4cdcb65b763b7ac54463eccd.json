{"remainingRequest":"/Users/liangzexiang/WebstormProjects/ays/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liangzexiang/WebstormProjects/ays/src/views/layout/components/TagsView/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/liangzexiang/WebstormProjects/ays/src/views/layout/components/TagsView/index.vue","mtime":1587402564000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liangzexiang/WebstormProjects/ays/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport ScrollPane from '@/components/ScrollPane'\nimport { generateTitle } from '@/utils/i18n'\n\nexport default {\n  components: { ScrollPane },\n  data() {\n    return {\n      visible: false,\n      top: 0,\n      left: 0,\n      selectedTag: {}\n    }\n  },\n  computed: {\n    visitedViews() {\n      return this.$store.state.tagsView.visitedViews\n    }\n  },\n  watch: {\n    $route() {\n      this.addViewTags()\n      this.moveToCurrentTag()\n    },\n    visible(value) {\n      if (value) {\n        document.body.addEventListener('click', this.closeMenu)\n      } else {\n        document.body.removeEventListener('click', this.closeMenu)\n      }\n    }\n  },\n  mounted() {\n    this.addViewTags()\n  },\n  methods: {\n    generateTitle, // generateTitle by vue-i18n\n    generateRoute() {\n      if (this.$route.name) {\n        return this.$route\n      }\n      return false\n    },\n    isActive(route) {\n      return route.path === this.$route.path\n    },\n    addViewTags() {\n      const route = this.generateRoute()\n      if (!route) {\n        return false\n      }\n      this.$store.dispatch('addView', route)\n    },\n    moveToCurrentTag() {\n      const tags = this.$refs.tag\n      this.$nextTick(() => {\n        for (const tag of tags) {\n          if (tag.to.path === this.$route.path) {\n            this.$refs.scrollPane.moveToTarget(tag.$el)\n\n            // when query is different then update\n            if (tag.to.fullPath !== this.$route.fullPath) {\n              this.$store.dispatch('updateVisitedView', this.$route)\n            }\n\n            break\n          }\n        }\n      })\n    },\n    refreshSelectedTag(view) {\n      this.$store.dispatch('delCachedView', view).then(() => {\n        const { fullPath } = view\n        this.$nextTick(() => {\n          this.$router.replace({\n            path: '/redirect' + fullPath\n          })\n        })\n      })\n    },\n    closeSelectedTag(view) {\n      this.$store.dispatch('delView', view).then(({ visitedViews }) => {\n        if (this.isActive(view)) {\n          const latestView = visitedViews.slice(-1)[0]\n          if (latestView) {\n            this.$router.push(latestView)\n          } else {\n            this.$router.push('/')\n          }\n        }\n      })\n    },\n    closeOthersTags() {\n      this.$router.push(this.selectedTag)\n      this.$store.dispatch('delOthersViews', this.selectedTag).then(() => {\n        this.moveToCurrentTag()\n      })\n    },\n    closeAllTags() {\n      this.$store.dispatch('delAllViews')\n      this.$router.push('/')\n    },\n    openMenu(tag, e) {\n      this.visible = true\n      this.selectedTag = tag\n      const offsetLeft = this.$el.getBoundingClientRect().left // container margin left\n      this.left = e.clientX - offsetLeft + 15 // 15: margin right\n      this.top = e.clientY\n    },\n    closeMenu() {\n      this.visible = false\n    }\n  }\n}\n",null]}